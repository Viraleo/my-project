Можно и нужно использовать пробелы для выравнивания основных ключевых слов по их правому краю. В типографике получающиеся таким образом «коридоры» стараются избегать, в то же время в нашем случае они, напротив, помогают лучше вычленять важные ключевые слова.
(SELECT f.species_name,
        AVG(f.height) AS average_height, AVG(f.diameter) AS average_diameter
   FROM flora AS f
  WHERE f.species_name = 'Banksia'
     OR f.species_name = 'Sheoak'
     OR f.species_name = 'Wattle'
  GROUP BY f.species_name, f.observation_date)

  UNION ALL

(SELECT b.species_name,
        AVG(b.height) AS average_height, AVG(b.diameter) AS average_diameter
   FROM botanic_garden_flora AS b
  WHERE b.species_name = 'Banksia'
     OR b.species_name = 'Sheoak'
     OR b.species_name = 'Wattle'
  GROUP BY b.species_name, b.observation_date);
___________
Всегда делайте перенос строки:
	•	перед AND или OR
	•	после точки с запятой (для разделения запросов)
	•	после каждого основного ключевого слова
	•	после запятой (при выделении логических групп столбцов)
Следуя принципу, что ключевые слова выравниваются по правому краю, а всё остальное — по левому, мы добиваемся достаточно удобного расположения частей кода, вследствие чего улучшается зрительная навигация по нему.

INSERT INTO albums (title, release_date, recording_date)
VALUES ('Charcoal Lane', '1990-01-01 01:01:01.00000', '1990-01-01 01:01:01.00000'),
       ('The New Danger', '2008-01-01 01:01:01.00000', '1990-01-01 01:01:01.00000');
UPDATE albums
   SET release_date = '1990-01-01 01:01:01.00000'
 WHERE title = 'The New Danger';
SELECT a.title,
       a.release_date, a.recording_date, a.production_date -- grouped dates together
  FROM albums AS a
 WHERE a.title = 'Charcoal Lane'
    OR a.title = 'The New Danger';
_________________
Формальные тонкости
	•	Используйте BETWEEN, где возможно, вместо нагромождения условий AND.
	•	Таким же образом старайтесь использовать IN() вместо OR.
	•	Используйте CASE, если значение должно быть интерпретировано до окончания выполнения запроса. С помощью CASE можно также формировать сложные логические структуры.
	•	По возможности избегайте использования UNION и временных таблиц.

SELECT CASE postcode
       WHEN 'BN1' THEN 'Brighton'
       WHEN 'EH1' THEN 'Edinburgh'
       END AS city
  FROM office_locations
 WHERE country = 'United Kingdom'
   AND opening_time BETWEEN 8 AND 9
   AND postcode IN ('EH1', 'BN1', 'NN1', 'KW1');
_____________________________________
SELECT name , price FROM products WHERE price<= 4000;
_____________________
SELECT * FROM orders
WHERE status != "cancelled";

SELECT * FROM orders 
WHERE sum > 3000 OR products_count >= 3 ;

SELECT * FROM orders
WHERE status IN ("cancelled", "returned");

SELECT * FROM orders 
WHERE sum >= 3000 AND products_count < 3 ;

Выберите из таблицы orders все отмененные заказы стоимостью от 3000 до 10000 рублей включительно.
Используйте BETWEEN.
SELECT * FROM orders 
WHERE status = "cancelled" AND sum BETWEEN  3000 AND 10000 ;

SELECT *
FROM orders
WHERE sum BETWEEN 3000 AND 10000 AND status LIKE 'cancelled';

Выберите из таблицы orders все отмененные заказы исключая заказы стоимостью от 3000 до 10000 рублей включительно.
SELECT * FROM orders 
WHERE status = "cancelled" AND sum NOT BETWEEN  3000 AND 10000 ;
___________________________
Выберите из таблицы products все товары в порядке возрастания цены (price).
SELECT *
FROM products 
ORDER BY price ASC;

SELECT * FROM products ORDER BY price;

Выберите из таблицы products все товары в порядке убывания цены.
Выведите только имена (name) и цены (price).
SELECT name, price
FROM products 
ORDER BY price DESC;

Выберите из таблицы products все товары стоимостью 5000 и выше в порядке убывания цены (price).
SELECT * 
FROM products 
WHERE price >= 5000 
ORDER BY price DESC;

Выберите из таблицы products все товары стоимостью до 3000 рублей отсортированные в алфавитном порядке. Вывести нужно только имя (name), количество (count) и цену (price).
SELECT name, count, price
FROM products 
WHERE price < 3000 
ORDER BY name;

Выберите из таблицы users фамилии (last_name) и имена (first_name) всех пользователей.
Данные должны быть отсортированы сначала по фамилии, а затем по имени.
сначала идет сортировка по фамилиям, потом по именам.
Фамилии первичны и они отсортированы верно. Имена вторичны, но в рамках каждой отдельной фамилии они отсортированы верно. Возьмите, например, "Антонова" - у неё сперва идет Алина, а потом Ольга.
SELECT last_name, first_name
FROM users 
ORDER BY last_name, first_name;

Выберите из таблицы users всех пользователей с зарплатой от 40 000 рублей и выше. Данные нужно сначала отсортировать по убыванию зарплаты (salary), а затем в алфавитном порядке по имени (first_name).
SELECT *
FROM users 
WHERE salary >= 40000
ORDER BY salary DESC, first_name;


Выберите сотрудников из таблицы users с зарплатой (salary) меньше 30 000 рублей и отсортируйте данные по дате рождения (birthday). Сотрудников с нулевой зарплатой выбирать не нужно.
SELECT * 
FROM users 
WHERE salary < 30000 AND salary > 0 
ORDER BY birthday ASC;
_______________________________
Для создания таблицы используется SQL-запрос. В нем указывается какая таблица создается, из каких атрибутов(полей) она состоит и какой тип данных имеет каждое поле, при необходимости указывается описание полей (ключевое поле и т.д.). Его структура :
ключевые слова : CREATE TABLE
	•	имя создаваемой таблицы;
	•	открывающая круглая скобка «(»;
	•	название поля и его описание, которое включает тип поля и другие необязательные характеристики;
	•	запятая;
	•	название поля и его описание;
	•	...
	•	закрывающая скобка «)».
Пример. Создадим таблицу genre следующей структуры:
Поле
Тип, описание
genre_id
INT PRIMARY KEY AUTO_INCREMENT
name_genre
VARCHAR(30)
Запрос:
CREATE TABLE genre(
    genre_id INT PRIMARY KEY AUTO_INCREMENT, 
    name_genre VARCHAR(30)
);
Созданная таблица - пустая.
Рекомендации по записи SQL запроса
	•	Ключевые слова: SQL не является регистрозависимым языком (CREATE и create - одно и тоже ключевое слово). 
	•	Ключевые слова SQL и типы данных рекомендуется  записывать прописными (большими) буквами.
	•	Имена таблиц и полей - строчными (маленькими) буквами.
	•	SQL-запрос можно писать на нескольких строках.
	•	В конце SQL-запроса ставится точка с запятой (хотя если Вы пишете один запрос, это необязательно).
Задание
Сформулируйте SQL запрос для создания таблицы book, занесите  его в окно кода (расположено ниже)  и отправьте на проверку (кнопка Отправить). Структура таблицы book:
Поле
Тип, описание
book_id
INT PRIMARY KEY AUTO_INCREMENT
title
VARCHAR(50)
author
VARCHAR(30)
price
DECIMAL(8, 2)
amount
INT
CREATE TABLE book (
book_id INT PRIMARY KEY AUTO_INCREMENT,
title VARCHAR(50),
author VARCHAR(30),
price DECIMAL(8,2),
amount INT)
PostgreSQL, то вместо INT AUTO_INCREMENT используйте SERIAL

SQL Server. То вместо AUTO_INCREMENT используйте IDENTITY
________________________
Вставка записи в таблицу
Для занесения новой записи в таблицу используется SQL запрос, в котором указывается в какую таблицу, в какие поля заносить новые значения. Структура запроса:
	•	ключевые слова INSERT INTO (ключевое слово INTO можно пропустить);
	•	имя таблицы, в которую добавляется запись;
	•	открывающая круглая скобка «(»;
	•	 список полей через запятую, в которые следует занести новые данные;
	•	закрывающая скобка «)»;
	•	ключевое слово VALUES;
	•	открывающая круглая скобка «(»;
	•	список значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой и дробной части используется точка;
	•	закрывающая скобка «)».
Пример. В таблицу, состоящую из двух столбцов добавим новую строку, при этом в поле1 заносится значение1,  в поле2 - значение2.
INSERT INTO таблица(поле1, поле2) 
VALUES (значение1, значение2);
В результате выполнения запроса новая запись заносится в конец обновляемой таблицы.
При составлении списка полей и списка значений необходимо учитывать следующее:
	1.	количество полей и количество значений в списках должны совпадать;
	2.	должно существовать прямое соответствие между позицией одного и того же элемента в обоих списках, поэтому первый элемент списка значений должен относиться к первому столбцу в списке столбцов, второй – ко второму столбцу и т.д.;
	3.	 типы данных элементов в списке значений должны быть совместимы с типами данных соответствующих столбцов таблицы ( целое число можно занести в поле типа DECIMAL, обратная операция - недопустима);
	4.	новые значения нельзя добавлять в поля, описанные как PRIMARY KEY AUTO_INCREMENT;
	5.	рекомендуется заполнять все поля записи, если же поле пропущено, значение этого поля зависит от установленных по умолчанию значений, если значения не установлены - на данной платформе вставляется пустое значение (NULL).
Пример
Вставим новую запись в таблицу genre, созданную на предыдущем шаге ( в первых двух строках показана структура таблицы, далее - ее содержимое):
genre_id
name_genre
INT PRIMARY KEY AUTO_INCREMENT
VARCHAR(30)
1
Роман
 Запрос:
INSERT INTO genre (name_genre) 
VALUES ('Роман');

INSERT INTO book (title,author,price,amount)
VALUES("Мастер и Маргарита", "Булгаков М.А.", 670.99, 3);

Не знаю, писали ли уже это, но если едет вставка кортежа, где все атрибуты не NULL, то можно не указывать поля. Т.е. вместо
INSERT INTO таблица(поле1, поле2)
VALUES (значение1, значение2);
писать:
INSERT INTO таблица
VALUES (значение1, значение2);

INSERT INTO book (title, author, price, amount)
    VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book (title, author, price, amount) 
    VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book (title, author, price, amount) 
    VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2); 
SELECT * 
    FROM book;
_______________________
С помощью SQL запросов можно осуществлять вычисления по каждой строке таблицы с помощью вычисляемого столбца. Для него в списке полей после оператора SELECT указывается выражение и задается имя.
Выражение может включать имена столбцов, константы, знаки операций, встроенные функции.
Результатом является таблица, в которую включены все данные из указанных после SELECT столбцов, а также новый столбец, в каждой строке которого вычисляется заданное выражение.
Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 
SELECT title,amount,
    amount* 1.65 AS pack
FROM book;
Выборка данных, вычисляемые столбцы, математические функции
В SQL реализовано множество  математических функций для работы с числовыми данными. В таблице приведены некоторые из них.
Функция
Описание
Пример
CEILING(x)
возвращает наименьшее целое число, большее или равное x
(округляет до целого числа в большую сторону)
CEILING(4.2)=5
CEILING(-5.8)=-5
ROUND(x, k)
округляет значение x до k знаков после запятой,
если k не указано – x округляется до целого
ROUND(4.361)=4
ROUND(5.86592,1)=5.9
FLOOR(x)
возвращает наибольшее целое число, меньшее или равное x
(округляет до  целого числа в меньшую сторону)
FLOOR(4.2)=4
FLOOR(-5.8)=-6
POWER(x, y)
возведение x в степень y
POWER(3,4)=81.0
SQRT(x)
квадратный корень из x
SQRT(4)=2.0
SQRT(2)=1.41...
DEGREES(x)
конвертирует значение x из радиан в градусы
DEGREES(3) = 171.8...
RADIANS(x)
конвертирует значение x из градусов в радианы
RADIANS(180)=3.14...
ABS(x)
модуль числа x
ABS(-1) = 1
ABS(1) = 1
PI()
pi = 3.1415926...
 
Пояснение.   Существуют разные способы округления чисел. В SQL реализовано математическое округление. Для округления вещественного числа нужно в записи числа выбрать разряд в дробной части, до которого производится округление. Цифра, записанная в выбранном разряде: не меняется, если следующая за ней справа цифра - 0, 1, 2, 3 или 4; увеличивается на единицу, если следующая за ней справа цифра - 5,6,7,8 или 9.
Для каждой книги из таблицы book вычислим налог на добавленную стоимость (имя столбца tax) , который включен в цену и составляет k = 18%,  а также цену книги (price_tax) без него. Формулы для вычисления:
tax= {{price *{ k \over 100}} \over {1+{k\over 100}}}
SELECT title, price, 
    (price*18/100)/(1+18/100) AS tax, 
    price/(1+18/100) AS price_tax 
FROM book;

SELECT title, author, amount,
ROUND ((price*0.7),2) AS new_price
FROM book;
__________________________
Выборка данных, вычисляемые столбцы, логические функции
В SQL реализована возможность заносить в поле значение в зависимости от условия. Для этого используется функция IF():
IF(логическое_выражение, выражение_1, выражение_2)
Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1, в противном случае –  значение выражения_2. Все три параметра IF() являются обязательными.
Допускается использование вложенных функций, вместо выражения_1 или выражения_2 может стоять новая функция IF.
Пример 
Для каждой книги из таблицы book установим скидку следующим образом: если количество книг меньше 4, то скидка будет составлять 50% от цены, в противном случае 30%.
Запрос:

SELECT title, amount, price, 
    IF(amount<4, price*0.5, price*0.7) AS sale
FROM book;

Пример
Усложним вычисление скидки в зависимости от количества книг. Если количество книг меньше 4 – то скидка 50%, меньше 11 – 30%, в остальных случаях – 10%. И еще укажем какая именно скидка на каждую книгу.

Запрос:
SELECT title, amount, price,
    ROUND(IF(amount < 4, price * 0.5, IF(amount < 11, price * 0.7, price * 0.9)), 2) AS sale,
    IF(amount < 4, 'скидка 50%', IF(amount < 11, 'скидка 30%', 'скидка 10%')) AS Ваша_скидка
FROM book;

SELECT author, title,
    ROUND(price * IF(author = 'Булгаков М.А.', 1.1, 
	IF(author = 'Есенин С.А.', 1.05, 1)), 2) 
AS new_price
FROM book;

IF("логическое_выражение", "выражение_1", "выражение_2").
Так вот "выражение_2" - состоит из второго тернарного оператора.
__________________________________
Выберите из таблицы orders 5 самых дорогих заказов за всё время.
Данные нужно отсортировать в порядке убывания цены.
Отмененные заказы не учитывайте.
SELECT * 
FROM orders
WHERE status != "cancelled"
ORDER BY sum desc LIMIT 5;

Выберите из таблицы products название и цены трех самых дешевых товаров, которые есть на складе.
SELECT name, price 
FROM products
WHERE count > 0
ORDER BY price ASC LIMIT 3;

Выберите из таблицы orders три последних заказа (по дате date) стоимостью от 3000 рублей и выше.
Данные отсортируйте по дате в обратном порядке.
SELECT * 
FROM orders 
WHERE sum >= 3000 
ORDER BY date DESC LIMIT 3;

Сайт выводит товары по 5 штук. Выберите из таблицы products товары, которые пользователи увидят на 3 странице каталога при сортировке в порядке возрастания цены (price).
SELECT * 
FROM products 
ORDER BY price ASC LIMIT 10, 5;

В таблице products 17 записей. Сайт выводит название (name) и цену (price) товаров в алфавитном порядке, по 6 записей на страницу. Напишите SQL запрос для получения списка товаров для формирования последней страницы каталога.
Товары, которых нет на складе, выводить не надо (таких товаров 3).
SELECT name, price 
FROM products 
WHERE count > 0 
ORDER BY name ASC LIMIT 12, 6;
__________________________
В логическом выражении после WHERE нельзя использовать названия столбцов, присвоенные им с помощью AS,  так как при выполнении запроса сначала вычисляется логическое выражение для каждой строки исходной таблицы, выбираются строки, для которых оно истинно. А только после этого формируется "шапка запроса" – столбцы, включаемые в запрос.
- - - - - - - - - - - - - - - - - - - -
Логическое выражение после ключевого слова WHERE кроме операторов сравнения  и выражений может включать  логические операции (И «and», ИЛИ «or», НЕ «not») и круглые скобки, изменяющие приоритеты выполнения операций.
Приоритеты операций:
	1.	круглые скобки
	2.	умножение  (*),  деление (/)
	3.	сложение  (+), вычитание (-)
	4.	операторы сравнения (=, >, <, >=, <=, <>)
	5.	NOT
	6.	AND
	7.	OR

Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
SELECT title, author, price, amount
FROM book
WHERE (price < 500 OR price > 600)
  AND (price * amount >= 5000);
- - - - - — - - - - — - - - - - - - - - - - - - - - - - - - - 
Логическое выражение после ключевого слова WHERE может включать операторы  BETWEEN и IN. Приоритет  у этих операторов такой же как у операторов сравнения, то есть они выполняются раньше, чем NOT, AND, OR.
Оператор BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы.
SELECT title, author
FROM book
WHERE price BETWEEN 540.50 AND 800 
AND amount IN (2, 3, 5, 7);
- - - - - - - - - - - - - - - - - - - - - - -
При выборке можно указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строки. Для этого используются ключевые слова ORDER BY, после которых задаются имена столбцов. При этом строки сортируются по первому столбцу, если указан второй столбец, сортировка осуществляется только для тех строк, у которых значения первого столбца одинаковы. По умолчанию ORDER BY выполняет сортировку по возрастанию. Чтобы управлять направлением сортировки вручную, после имени столбца указывается ключевое слово ASC (по возрастанию) или DESC (по убыванию). 
Столбцы после ключевого слова ORDER BY можно задавать:
	•	названием столбца;
	•	номером столбца;
	•	именем столбца (указанным после AS).
SELECT author, title, amount AS Количество
FROM book
WHERE price < 750
ORDER BY author, Количество DESC;
 Если названия столбцов заключены в кавычки, то при использовании их в сортировке, необходимо записывать их БЕЗ КАВЫЧЕК.
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
SELECT author, title
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title ASC;
—- - - - - - - - - - - - - - - -
Выборка данных, оператор LIKE
Оператор LIKE используется для сравнения строк. В отличие от операторов отношения равно (=) и не равно (<>), LIKE позволяет сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном. Шаблон может включать обычные символы и символы-шаблоны. При сравнении с шаблоном, его обычные символы должны в точности совпадать с символами, указанными в строке. Символы-шаблоны могут совпадать с произвольными элементами символьной строки.
Символ-шаблон
Описание
Пример
%
Любая строка, содержащая ноль или более символов
SELECT * FROM book WHERE author LIKE '%М.%'
выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»
_ (подчеркивание)
Любой одиночный символ
SELECT * FROM book WHERE title LIKE 'Поэм_'
выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.

Вывести названия книг, начинающихся с буквы «Б».
SELECT title 
FROM book
WHERE title LIKE 'Б%';
/* эквивалентное условие 
title LIKE 'б%'*/Строчные и прописные буквы в строках эквивалентны.

Вывести название книг, состоящих ровно из 5 букв.
Запрос:
SELECT title FROM book 
WHERE title LIKE "_____" */Для обозначения одного любого символа используется  "_", следовательно для обозначения 5 символов используется 5 подряд символов подчеркивания.*/

Вывести книги, название которых длиннее 5 символов:
Запрос:
SELECT title FROM book 
WHERE title LIKE "______%";
/* эквивалентные условия 
title LIKE "%______"
title LIKE "%______%"
*/
 - — - - - - - - - - - - - - - 
	.	Вывести на экран все названия книг и их авторов:
SELECT title, author FROM book;
	.	Вывести на экран список книг, отсортированный по названию:
SELECT * FROM book ORDER BY title;
	.	Вывести на экран суммарную стоимость всех книг в наличии:
SELECT SUM(price * amount) as total FROM book;
	.	Вывести на экран список книг автора "Достоевский Ф.М.":
SELECT * FROM book WHERE author='Достоевский Ф.М.';
	.	Вывести на экран список книг, стоимость которых не превышает 500 рублей:
SELECT * FROM book WHERE price<=500;
	.	Вывести на экран список книг, которых в наличии осталось менее 5 штук:
SELECT * FROM book WHERE amount<5;
	.	Вывести на экран список книг автора "Булгаков М.А.", стоимостью более 600 рублей:
SELECT * FROM book WHERE author='Булгаков М.А.' AND price>600;
	.	Вывести на экран общее количество книг:
SELECT COUNT(*) FROM book;
	.	Вывести на экран среднюю стоимость книг:
SELECT AVG(price) FROM book;
	.	Вывести на экран список книг, название которых содержит слово "гвардия":
SELECT * FROM book WHERE title LIKE '%гвардия%';
——— - - - - - - - - - - - - - - - - - -
	•	% - любая строка, содержащая ноль или более символов.
/*Выполняется поиск и выдаются все книги, инициалы авторов которых содержат «М.»*/
SELECT * FROM book WHERE author LIKE '%М.%'
	•	_ - Любой одиночный символ.
/*Выполняется поиск и выдаются все книги, названия которых либо «Поэма», либо «Поэмы» и пр.*/
SELECT * FROM book WHERE title LIKE 'Поэм_'

SELECT title 
FROM book		Вывод книг, названия которых начинаются на Б:
WHERE title LIKE 'Б%';
/* эквивалентное условие 
title LIKE 'б%'
*/Вывод книг, название которых содержат 5 символов:

SELECT title FROM book 
WHERE title LIKE "_____"
		Вывод книг, название которых более 5 символов:
SELECT title FROM book 
WHERE title LIKE "______%";
/* эквивалентные условия 
title LIKE "%______"
title LIKE "%______%"
*/

SELECT title, author
FROM book
WHERE title LIKE "_% %" AND ( author LIKE "% %.С." or author LIKE "%С.%")
ORDER BY title;
_______________________________
Отобрать различные (уникальные) элементы столбца amount таблицы book.
SELECT amount
FROM book
GROUP BY amount;
_____________________________________________
SELECT author, SUM(amount)
FROM book
GROUP BY author;
Примечание. Обратите внимание, что в качестве названия вычисляемого столбца в результирующей таблице используется выражение SUM(amount). Рекомендуется всем вычисляемым столбцам давать имя.
Также групповые функции позволяют посчитать сколько записей относится к каждой группе, для этого используется функция COUNT().
SELECT author, COUNT(author), COUNT(amount), COUNT(*)
FROM book    /*Посчитать, сколько различных книг каждого автора хранится на складе.*/
GROUP BY author; 

/*Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответствено.*/
SELECT   
    author AS Автор,
    COUNT(title) AS Различных_книг,
    SUM(amount) AS Количество_экземпляров
FROM
    book
GROUP BY
    author;

В дополнение отмечу, eсли названия книг для одного и того же автора повторяются, а требуется посчитать количество уникальных наименований, можно использовать ключевое слово DISTINCT в агрегатной функции (и не только в COUNT).
SELECT     author,     COUNT(DISTINCT title) FROM book GROUP BY author;
_____________________________
SELECT author, MIN(price) AS min_price
FROM book		/Вывести минимальную цену книги каждого автора
GROUP BY author;

SELECT author, 
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена,
    AVG(price) AS Средняя_цена
FROM book		
GROUP BY author;

/Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:
tax= {{S *{ k \over 100}} \over {1+{k\over 100}}},
S\_without\_tax= {{S} \over {1+{k\over 100}}}
SELECT author, 
    ROUND(SUM(price*amount),2) AS Стоимость,
    ROUND((SUM(price*amount)*0.18)/(1.18),2) AS НДС ,
    ROUND((SUM(price*amount)/1.18),2) AS Стоимость_без_НДС
FROM book		
GROUP BY author;

SELECT author, ROUND(price_all, 2) AS "Стоимость", ROUND(price_all*0.18/1.18, 2) AS "НДС", ROUND(price_all/1.18, 2) AS "Стоимость_без_НДС"
FROM
    (SELECT author, SUM(price*amount) AS price_all FROM book GROUP BY author) AS book_new;
_______________
Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
SELECT DISTINCT 
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена,
    ROUND(AVG(price),2) AS Средняя_цена
FROM book;

SELECT MIN(price) AS Минимальная_цена,
       MAX(price) AS Максимальная_цена,
       ROUND(AVG(price), 2) AS Средняя_цена
FROM (SELECT DISTINCT title, price
      FROM book) AS Таблица_уникальных_книг;

/Посчитать количество экземпляров книг на складе./
SELECT SUM(amount) AS Количество, 
    SUM(price * amount) AS Стоимость
FROM book;

SELECT 
    ROUND(AVG(price),2) AS Средняя_цена, 
    ROUND(SUM(price*amount),2) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14;

/Вывести максимальную и минимальную цену книг каждого автора, кроме Есенина, количество экземпляров книг которого больше 10. 
SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
WHERE author <> 'Есенин С.А.'
GROUP BY author
HAVING SUM(amount) > 10;

/#Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
SELECT author, 
    SUM(price * amount) AS Стоимость 
FROM book 
WHERE title NOT IN ('Идиот', 'Белая гвардия') 
GROUP BY author 
HAVING Стоимость > 5000 
ORDER BY Стоимость DESC;

MySQL: FROM => WHERE = SELECT = GROUP BY = HAVING = ORDER BY = LIMIT.   
PostgreSQL: FROM => WHERE = GROUP BY = HAVING = SELECT = DISTINCT = ORDER BY = LIMIT.
___________________________________
Вывести информацию о самых дешевых книгах, хранящихся на складе. Для реализации этого запроса нам необходимо получить минимальную цену из столбца price таблицы book, а затем вывести информацию о тех книгах, цена которых равна минимальной. Первая часть – поиск минимума – реализуется вложенным запросом.
SELECT title, author, price, amount
FROM book
WHERE price = (
         SELECT MIN(price) 
         FROM book
      );
ывести информацию (автора, название и цену) о книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
SELECT author,title,price
FROM    book
WHERE  price <= (SELECT AVG(price) FROM  book)
ORDER BY price DESC;
ODER BY - сортирует строки. При этом количество строк в результатах запроса не меняется.
GROUP BY - группирует результаты. При этом меняется количество строк в результате запроса, т.к. он объединяет строки с одинаковым значением в колонке по которой группируем. 
________________________
Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на складе более чем на 3. То есть нужно вывести и те книги, количество экземпляров которых меньше среднего на 3, или больше среднего на 3
SELECT title, author, amount 
FROM book
WHERE ABS(amount - (SELECT AVG(amount) FROM book)) >3;

/*Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.*/
SELECT author, title, price
FROM book
WHERE ABS(price - (SELECT MIN(price) FROM book)) <= 150
ORDER BY price;
Не по теме урока конечно, но лучше сразу отучить себя писать такие условия
WHERE (price - (SELECT MIN(price) FROM book)) <=150,
если можно написать 
WHERE price <= (SELECT MIN(price)+150 FROM book))
в первом случае значение (price - (SELECT MIN(price) FROM book)) вычисляется для каждой записи, во втором только 1 раз.
+для сравнения будет использован индекс, но это совсем другая история )
___________________________________
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
SELECT author, title, amount
FROM book
WHERE amount IN (
        SELECT amount 
        FROM book 
        GROUP BY amount 
        HAVING COUNT(amount) = 1);
________________________________________
Вывести информацию о тех книгах, количество которых меньше самого маленького среднего количества книг каждого автора
SELECT title, author, amount, price
FROM book
WHERE amount < ALL (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author);


Вывести информацию о тех книгах, количество которых меньше самого большого среднего количества книг каждого автора
SELECT title, author, amount, price
FROM book
WHERE amount < ANY (
        SELECT AVG(amount) 
        FROM book 
        GROUP BY author);

Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
SELECT author,title, price
FROM book
WHERE price < ANY (
        SELECT MIN(price) 
        FROM book 
        GROUP BY author 
      );
_______________________________________
Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на складе более чем на 3,  а также указать среднее значение количества экземпляров книг.
Запрос:
SELECT title, author, amount, 
    (
     SELECT AVG(amount) 
     FROM book
    ) AS Среднее_количество 
FROM book
WHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;
____________________________
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ. В результат не включать книги, которые заказывать не нужно.
SELECT title, author, amount, 
  CASE 
    WHEN amount = (SELECT MAX(amount) FROM book) THEN 0
    ELSE (SELECT MAX(amount) FROM book) - amount
  END AS Заказ
FROM book
WHERE amount < (SELECT MAX(amount) FROM book)

SELECT title, author, amount, (SELECT MAX(amount) FROM book) - amount AS Заказ
FROM book
HAVING Заказ > 0;

SELECT title, 
       author, 
       amount,
      (SELECT MAX(amount) FROM book) - amount AS Заказ 
FROM book
WHERE ((SELECT MAX(amount) FROM book) - amount) <> 0

SELECT title, author, amount,
(SELECT max(amount) from book)-amount AS Заказ
from book
where amount not in(select MAX(amount) from book) 
______________________
Занести все книги из таблицы supply в таблицу book.
Запрос:
INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply;

SELECT * FROM book;

Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author NOT IN("Булгаков М.А.", "Достоевский Ф.М.");

SELECT * FROM book;

INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author NOT IN (
        SELECT author 
        FROM book
      );
SELECT * FROM book;
_______________________
Уменьшить на 30% цену тех книг в таблице book, количество которых меньше 5.
UPDATE book 
SET price = 0.7 * price 
WHERE amount < 5;

SELECT * FROM book;

Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
UPDATE book 
SET price = 0.9 * price 
WHERE amount BETWEEN 5 AND 10;
SELECT * FROM book;

SET столбец = IF(условие, выражение_1, выражение_2)
Выполняется этот оператор так:
	•	сначала вычисляется условие;
	•	если условие ИСТИНА, то вычисляется выражение_1, в противном случае (если условие ЛОЖНО) вычисляется выражение_2;
	•	в столбец заносится результат выполнения функции (либо значение выражения_1, либо значение выражения_2 в зависимости от условия).
Например, для увеличения на 10% только цен книг Булгакова используется запрос:
UPDATE book 
SET price = IF(author = "Булгаков М.А.", price * 1.1, price);

таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.
UPDATE book 
SET buy = IF(
    buy > amount, amount, buy),
    price = IF(buy = 0, price* 0.9, price );
SELECT * FROM book

Если в таблице supply  есть те же книги, что и в таблице book, добавлять эти книги в таблицу book не имеет смысла. Необходимо увеличить их количество на значение столбца amountтаблицы supply.
Запрос:
UPDATE book, supply 
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;
_______________
password na sql-ex feta342
_______________________
#Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
UPDATE book, supply 
SET book.amount = book.amount + supply.amount, book.price = (book.price + supply.price)/2
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;

В PostgreSQL слегка иной принцип мульти-update для нескольких таблиц. Вторая таблица указывается не в UPDATE, а в FROM.
UPDATE table1 AS b
SET field1 = b.field1 + s.field2,
    field2  = b.field2 - s.field3
FROM table2 AS s
WHERE b.field4 = s.field4
  AND b.field5 = s.field5;

Если нужно изменить несколько столбцов, пишется ОДИН SET и столбцы и действия над ними перечисляются через запятую
WHERE один на все поля внутри SET.
_________________________________
Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
DELETE FROM supply
WHERE author IN (
  SELECT author 
  FROM book
  GROUP BY author
  HAVING SUM(amount) > 10
);
SELECT * FROM supply
___________________________________________
Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.
CREATE TABLE ordering AS 
SELECT author, title, (SELECT ROUND(AVG(amount)) FROM book) AS amount 
FROM book
WHERE amount < (SELECT ROUND(AVG(amount)) FROM book);

SELECT * FROM ordering;
